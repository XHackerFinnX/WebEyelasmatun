document.addEventListener('DOMContentLoaded', async function () {
    const today = 'today';
    let availableDates = [];

    try {
        const responsedr = await fetch('/date_record', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ today }),
        });

        if (responsedr.ok) {
            const data = await responsedr.json();
            availableDates = data.dates;

            // –í—ã–ø–æ–ª–Ω—è–µ–º main –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è availableDates
            await main();
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', responsedr.status);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async function main() {
        async function getUserIP() {
            try {
                const response = await fetch('https://api.ipify.org?format=json');
                if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP');
                const data = await response.json();
                return data.ip;
            } catch (error) {
                return null;
            }
        }

        async function sendIPToServer(ip) {
            try {
                const response = await fetch('/save-ip', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ ip }),
                });

                if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ IP');
            } catch (error) {
                console.error(error);
            }
        }

        const ip = await getUserIP();
        if (ip) {
            await sendIPToServer(ip);
        } else {
            console.error('');
        }
    }

    let calendar = flatpickr("#calendar", {
        inline: true,
        minDate: "today",
        dateFormat: "Y-m-d",
        locale: "ru",
        monthSelectorType: "static",
        onDayCreate: function(dObj, dStr, fp, dayElem) {
            const dateStr = dayElem.dateObj.toISOString().split('T')[0];
            if (availableDates.includes(dateStr)) {
                dayElem.style.border = "2px solid green";
                dayElem.style.borderRadius = "50%";
                dayElem.style.boxSizing = "border-box";
            }
        },
        onChange: function(selectedDates, dateStr, instance) {
            const bookButton = document.getElementById('book-button');
            bookButton.disabled = selectedDates.length === 0;
        }
    });

    const bookButton = document.getElementById('book-button');
    const errorPopup = document.getElementById('errorPopup');
    const closePopupButton = document.getElementById('closePopup');

    bookButton.addEventListener('click', function() {
        const selectedDate = calendar.selectedDates[0];
        if (selectedDate) {
            const dateStr = selectedDate.toISOString().split('T')[0];
            const isAvailable = availableDates.includes(dateStr);

            if (isAvailable) {
                openModal();  // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            } else {
                showErrorPopup();
            }
        }
    });

    closePopupButton?.addEventListener('click', function() {
        errorPopup.style.display = 'none';
    });

    function showErrorPopup() {
        errorPopup.style.display = 'block';
        setTimeout(() => {
            errorPopup.style.display = 'none';
        }, 3000);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    async function openModal() {
        const modalOverlay = document.getElementById('modalOverlay');
        const closeModal = document.getElementById('closeModal');
        const timeButtons = document.querySelectorAll('.time-button');
        const submitButton = document.getElementById('submitButton');
        const commentBox = document.querySelector('.comment-box');
        const modalContent = modalOverlay.querySelector('.modal'); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
        let selectedTime = null;

        try {
            const responsetr = await fetch('/time_record', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ time: calendar.selectedDates[0].toISOString().split('T')[0] }),
            });

            // if (responsetr.ok) {

            //     const timeHTML = await responsetr.text(); // –ü–æ–ª—É—á–∞–µ–º HTML —Å —Å–µ—Ä–≤–µ—Ä–∞
            //     const modalContent = document.querySelector(".modal");
            //     modalContent.innerHTML = timeHTML; // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π HTML

            if (responsetr.ok) {
                const data = await responsetr.json();
                const times = data.times_r;
                let buttonsHTML = '';
                const modalTitle = document.querySelector('.modal-title');

                modalContent.querySelectorAll('.time-button').forEach(btn => btn.remove());

                times.forEach(time => {
                    buttonsHTML += `<button class="time-button"><span class="icon">&#x23F0;</span> ${time}</button>`;
                });
                
                // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –≤–µ—Å—å –±–ª–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ <h2 class="modal-title">
                modalTitle.insertAdjacentHTML('afterend', buttonsHTML);

                // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                modalContent.querySelectorAll('.time-button').forEach(button => {
                    button.addEventListener('click', () => {
                        // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å "selected" —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
                        modalContent.querySelectorAll('.time-button').forEach(btn => btn.classList.remove('selected'));
                        button.classList.add('selected');
                        selectedTime = button.textContent.split('\n')[0].split(' ')[1]; // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ data-time
                    });
                });

            } else {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', responsetr.status);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ time_record:', error);
        }

        modalOverlay.style.display = 'flex';

        closeModal.addEventListener('click', () => {
            modalOverlay.style.display = 'none';
            commentBox.value = '';
        });

        modalOverlay.addEventListener('click', (event) => {
            if (event.target === modalOverlay) {
                modalOverlay.style.display = 'none';
                commentBox.value = '';
            }
        });

        // timeButtons.forEach(button => {
        //     button.addEventListener('click', () => {
        //         timeButtons.forEach(btn => btn.classList.remove('selected'));
        //         button.classList.add('selected');
        //         selectedTime = button.textContent.trim();
        //     });
        // });

        submitButton.addEventListener('click', async () => {
            const comment = commentBox.value.trim();
            if (!selectedTime) {
                console.log('–ù–µ –≤—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è');
                return;
            }

            // –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modalOverlay.style.display = 'none';

            // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
            showLoading();

            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å
            await fetch('/record', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    date: calendar.selectedDates[0].toISOString().split('T')[0],
                    time: selectedTime,
                    comment: comment
                })
            })
            .then(response => response.json())
            .then(data => {
                // –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
                hideLoading();

                // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if (data.success) {
                    showStatusMessageTrue("–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å üòä");
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 2000);
                } else {
                    showStatusMessageFalse("–ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è üò¢");
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 2000);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                hideLoading();
                showStatusMessageFalse("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ üò≠");
                setTimeout(() => {
                    window.location.href = '/';
                }, 2000);
            });

            // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            commentBox.value = '';
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    function showLoading() {
        const overlayElement = document.createElement('div');
        overlayElement.id = 'loadingOverlay';
        overlayElement.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        `;

        const loadingElement = document.createElement('div');
        loadingElement.id = 'loading';
        loadingElement.style.cssText = `
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        `;

        overlayElement.appendChild(loadingElement);
        document.body.appendChild(overlayElement);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∞–Ω–∏–º–∞—Ü–∏–∏
        const style = document.createElement('style');
        style.textContent = `
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;
        document.head.appendChild(style);

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø–æ–¥ –æ–≤–µ—Ä–ª–µ–µ–º
        document.body.style.overflow = 'hidden';
        const allElements = document.body.getElementsByTagName('*');
        for (let i = 0; i < allElements.length; i++) {
            if (allElements[i] !== overlayElement && !overlayElement.contains(allElements[i])) {
                allElements[i].style.pointerEvents = 'none';
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    function hideLoading() {
        const overlayElement = document.getElementById('loadingOverlay');
        if (overlayElement) {
            overlayElement.remove();
        }

        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        document.body.style.overflow = '';
        const allElements = document.body.getElementsByTagName('*');
        for (let i = 0; i < allElements.length; i++) {
            allElements[i].style.pointerEvents = '';
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
    function showStatusMessageTrue(message) {
        const statusElement = document.createElement('div');
        statusElement.textContent = message;
        statusElement.style.cssText = `
            position: fixed;
            top: 20%;
            left: 50%;
            width: auto;
            justify-content: center;
            transform: translate(-50%, -50%);
            padding: 20px;
            background-color: #f8f8f8;
            border: 1px solid #ddd;
            border-radius: 30px;
            z-index: 10000;
        `;
        document.body.appendChild(statusElement);

        // –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            statusElement.remove();
        }, 2000);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
    function showStatusMessageFalse(message) {
        const statusElement = document.createElement('div');
        statusElement.textContent = message;
        statusElement.style.cssText = `
            position: fixed;
            top: 20%;
            left: 50%;
            width: auto;
            width: 180px;
            justify-content: center;
            transform: translate(-50%, -50%);
            padding: 20px;
            background-color: #f8f8f8;
            border: 1px solid #ddd;
            border-radius: 30px;
            z-index: 10000;
        `;
        document.body.appendChild(statusElement);

        // –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            statusElement.remove();
        }, 2000);
    }
});

document.addEventListener('DOMContentLoaded', function() {
    const menuIcon = document.getElementById('menuIcon');
    const dropdownMenu = document.getElementById('dropdownMenu');

    menuIcon.addEventListener('click', function(event) {
        event.stopPropagation();
        dropdownMenu.classList.toggle('active');
        menuIcon.classList.toggle('active');
    });

    // Close the menu when clicking outside
    document.addEventListener('click', function(event) {
        if (!menuIcon.contains(event.target) && !dropdownMenu.contains(event.target)) {
            dropdownMenu.classList.remove('active');
            menuIcon.classList.remove('active');
        }
    });

    // Prevent clicks inside the dropdown menu from closing it
    dropdownMenu.addEventListener('click', function(event) {
        event.stopPropagation();
    });

    const logoutButton = document.getElementById('logoutButton');
    logoutButton.addEventListener('click', async function() {
        console.log('User logged out');
        try {
            const response = await fetch('/logout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(),
            });

            if (response.ok) {
                window.location.href = '/auth';
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });
});